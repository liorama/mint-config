import os
import requests
import random

POST = 'post'
GET = 'get'
PUT = 'put'
PATCH = 'patch'
DELETE = 'delete'


class ClientError(Exception):
    def __init__(self, e, res):
        if res:
            json = res.json()
            http_code = res.status_code
            self.message = 'error: <%s>\nhttp code <%s>\nresponse <%s>' % (e, http_code, json)
        else:
            self.message = 'error: <%s>' % (e)

    def __str__(self):
        return self.message

    def __repr__(self):
        return self.message



class Client():
    base = 'http://api.rounds.video/v1' #'http://%s/v1' % os.getenv('BOOYAH_TEST_ADDRESS')
    client_id = None
    api_key = None
    device_id = None
    app_name = 'booyah'
    os_name = 'ios'
    app_version = '1.0.1'
    minor_version = '1.0'

    def __init__(self, device_id):
        self.device_id = device_id

    def _request(self, method, path, payload=None):
        request_id = 'request_%s' % random.randint(1, 1e10)
        headers = {
            'content-type': 'application/json',

            'x-fake-remote-addr': '31.168.235.22',
            'x-rounds-request-id': request_id,
            'x-rounds-device-id': self.device_id,
            'x-rounds-app-name': self.app_name,
            'x-rounds-os-name': self.os_name,
            'x-rounds-app-version': self.app_version,
            'x-rounds-version': self.minor_version,

            'x-rounds-client-id': self.client_id,
            'x-rounds-api-key': self.api_key,
        }
        res = None
        try:
            res = requests.request(method, self.base + path, headers=headers, json=payload)
            res.raise_for_status()
        except Exception as e:
            print('exception:%s' % e)
            raise ClientError(e, res)
        else:
            return res

    def register(self):
        payload = {"hardware_data":
                   {"model": "test",
                    "manufacturer": "samsung"},
                   "carrier_data":
                   {"sim_data": {"code": "11",
                                 "name": "aa"},
                    "network_operator": {"code": "22",
                                         "name": "bb"},
                    "network_type": "wifi"},
                   "app_data": {"version": "1.0.1",
                                "type": "ios",
                                "name": "booyah"},
                   "os_data": {"locale": "en_US",
                               "version": "9.0.2",
                               "name": "ios"},
                   "id": self.device_id}
        res = self._request(POST, '/devices', payload).json()
        self.api_key = res['api_key']
        self.client_id = res['client_id']
        return res

    def update_push_data(self, token_type, token):
        payload = {'token': token}
        self._request(PATCH, '/devices/%s/push_data/%s' % (self.device_id, token_type), payload)

    def create_group(self):
        res = self._request(POST, '/groups').json()
        return res

    def get_groups(self):
        res = self._request(GET, '/groups').json()
        return res['data']

    def group_by_link(self, link):
        from requests.utils import quote
        payload = {'link': link}
        res = self._request(GET, '/groups?link=%s' % quote(link, safe=''), payload).json()
        return res

    def get_group_data(self, group_id):
        res = self._request(GET, '/groups/%s' % group_id).json()
        return res

    def change_group_name(self, group_id, new_name):
        payload = {'name': new_name}
        res = self._request(PATCH, '/groups/%s/name' % group_id, payload).json()
        return res

    def change_group_image_url(self, group_id, new_group_url):
        payload = {'image': new_group_url}
        res = self._request(PATCH, '/groups/%s/image' % group_id, payload).json()
        return res

    def join_conference(self, group_id):
        payload = {'group_id': group_id}
        res = self._request(POST, '/conferences', payload).json()
        return res

    def leave_conference(self, conference_id):
        self._request(DELETE, '/conferences/%s/participants/me' % conference_id)

    def set_alerts(self, group_id, enabled):
        payload = {'enabled': enabled}
        res = self._request(PATCH, '/groups/%s/members/me/alerts' % group_id, payload)
        return res
